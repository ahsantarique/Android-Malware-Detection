import os
import math
import decimal 
import numpy as np
from sklearn.svm import SVR
from sklearn.model_selection import cross_val_score
import gc
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, make_scorer
from scipy.stats import pearsonr
from sklearn.neural_network import MLPRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import KFold
import scipy.stats as stat
from sklearn.metrics import f1_score as fscore
from sklearn.metrics import accuracy_score as accuracy
from sklearn.metrics import precision_score as precision
from sklearn.metrics import recall_score as recall
from sklearn.metrics import confusion_matrix


def neuralNet():
	return MLPRegressor(hidden_layer_sizes=(50,100,50), activation='relu', 
                    alpha=0.05, batch_size=128, early_stopping=True, 
                    learning_rate_init=0.01, solver='adam', learning_rate='adaptive', nesterovs_momentum=True, 
                    max_iter=100, tol=1e-8, verbose=False, validation_fraction=0.1)

def svr():
	return SVR(C=0.1, epsilon=0.01)


GOOD_DATA = 'data/good.dat'
BAD_DAT = 'data/bad.dat'

def loadDataSet():
	X0 = np.loadtxt(GOOD_DATA, dtype= np.float128)

	y0 = np.array([0 for i in range(len(X0))])

	X1 = np.loadtxt(BAD_DAT, dtype=np.float128)

	y1 = np.array([1 for i in range(len(X1))])
	
	X = np.append(X0, X1, axis=0)

	y = np.append(y0, y1)
	return X, y



def specificity(y_true, y_pred):
	tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
	spec = tn / (tn+fp)
	return spec

def crossValidate(X, y, nfold):
	kf = KFold(n_splits=nfold, shuffle=True)
	kf.get_n_splits(X)

	sorted_indices = np.loadtxt('final_sorted_indices.txt', dtype=int)
	
	r = 16

	print("K-fold: K=", nfold)
	f1 = 0
	acc = 0
	prec = 0
	rec = 0
	spec = 0
	for train_index, test_index in kf.split(X):
	    	# print("TRAIN:", train_index, "TEST:", test_index)

		X_train, X_test = X[train_index], X[test_index]
		y_train, y_test = y[train_index], y[test_index]


    		selected_feature_indices = sorted_indices[:r]
    		X_train_selected_features = X_train[:, selected_feature_indices]
    		X_test_selected_features = X_test[:, selected_feature_indices]
		
		clf = GaussianNB()
		y_pred = clf.fit(X_train_selected_features, y_train).predict(X_test_selected_features)
		
		f1 += fscore(y_test, y_pred)
		acc += accuracy(y_test, y_pred)
		prec += precision(y_test, y_pred)
		rec += recall(y_test, y_pred)
		spec += specificity(y_test, y_pred)

	print('fscore',f1/nfold)
	print('accuracy', acc/nfold)
	print('precision', prec/nfold)
	print('recall', rec/nfold)
	print('specificity', spec/nfold)

def main():
	X, y = loadDataSet()
	for nfold in range(2,10):
		crossValidate(X, y, nfold)


if __name__ == "__main__":
	main()
