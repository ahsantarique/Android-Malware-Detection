import os
import math
import decimal 
import numpy as np
from sklearn.svm import SVR
from sklearn.model_selection import cross_val_score
import gc
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, make_scorer
from scipy.stats import pearsonr
from sklearn.neural_network import MLPRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import KFold
import scipy.stats as stat
from sklearn.metrics import f1_score as fscore
from sklearn.metrics import accuracy_score as accuracy
from sklearn.metrics import precision_score as precision
from sklearn.metrics import recall_score as recall
from sklearn.feature_selection import SelectKBest, mutual_info_classif


def p(y_pred,y_true):
    return pearsonr(y_pred,y_true)[0]


def neuralNet():
	return MLPRegressor(hidden_layer_sizes=(50,100,50), activation='relu', 
                    alpha=0.05, batch_size=128, early_stopping=True, 
                    learning_rate_init=0.01, solver='adam', learning_rate='adaptive', nesterovs_momentum=True, 
                    max_iter=100, tol=1e-8, verbose=False, validation_fraction=0.1)

def svr():
	return SVR(C=0.1, epsilon=0.01)


GOOD_DATA = 'data/good.dat'
BAD_DAT = 'data/bad.dat'

def loadDataSet():
	X0 = np.loadtxt(GOOD_DATA, dtype= np.float128)

	y0 = np.array([0 for i in range(len(X0))])

	X1 = np.loadtxt(BAD_DAT, dtype=np.float128)

	y1 = np.array([1 for i in range(len(X1))])
	
	X = np.append(X0, X1, axis=0)

	y = np.append(y0, y1)
	return X, y


def writeIntNPArray(filename, array):
	with open(filename, 'w+') as file:
		for i in array:
			file.write(str(i)+' ')
		file.write('\n')


def main():
	X, y = loadDataSet()

	selector = SelectKBest(score_func=mutual_info_classif, k=16)
	selector.fit(X, y)
	X_new = selector.transform(X)

	X_new.shape
	best_features = selector.get_support(indices = True)
	print(best_features)
	# writeIntNPArray('info_gain_sorted_features.txt', a[0])
	clf = GaussianNB()
	for cv in range(2,11):
		print("cv:", cv)
		score = cross_val_score(clf, X_new, y, scoring='f1',cv=cv)
		print(score)
		print("average", score.mean())
		print("stddev", score.std())


if __name__ == "__main__":
	main()
