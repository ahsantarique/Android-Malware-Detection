import os
import math
import decimal 
import numpy as np
from sklearn.svm import SVR
from sklearn.model_selection import cross_val_score
import gc
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, make_scorer
from scipy.stats import pearsonr
from sklearn.neural_network import MLPRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import KFold
import scipy.stats as stat
from sklearn.metrics import f1_score as fscore
from sklearn.metrics import accuracy_score as accuracy
from sklearn.metrics import precision_score as precision
from sklearn.metrics import recall_score as recall

def p(y_pred,y_true):
    return pearsonr(y_pred,y_true)[0]


def neuralNet():
	return MLPRegressor(hidden_layer_sizes=(50,100,50), activation='relu', 
                    alpha=0.05, batch_size=128, early_stopping=True, 
                    learning_rate_init=0.01, solver='adam', learning_rate='adaptive', nesterovs_momentum=True, 
                    max_iter=100, tol=1e-8, verbose=False, validation_fraction=0.1)

def svr():
	return SVR(C=0.1, epsilon=0.01)


GOOD_DATA = 'data/good.dat'
BAD_DAT = 'data/bad.dat'

def loadDataSet():
	X0 = np.loadtxt(GOOD_DATA, dtype= np.float128)

	y0 = np.array([0 for i in range(len(X0))])

	X1 = np.loadtxt(BAD_DAT, dtype=np.float128)

	y1 = np.array([1 for i in range(len(X1))])
	
	X = np.append(X0, X1, axis=0)

	y = np.append(y0, y1)
	return X, y





def main():
	X, y = loadDataSet()

	kf = KFold(n_splits=10, shuffle=True)
	kf.get_n_splits(X)

	sorted_indices = np.loadtxt('final_sorted_indices.txt', dtype=int)
	
	rLIMIT = 201;

	f1 = [0 for r in range(0, rLIMIT)]

	for train_index, test_index in kf.split(X):
	    	# print("TRAIN:", train_index, "TEST:", test_index)

		X_train, X_test = X[train_index], X[test_index]
		y_train, y_test = y[train_index], y[test_index]


		for r in range(1, rLIMIT):
		    	selected_feature_indices = sorted_indices[:r]
		    	X_train_selected_features = X_train[:, selected_feature_indices]
		    	X_test_selected_features = X_test[:, selected_feature_indices]

    			clf = GaussianNB()
    			y_test_pred = clf.fit(X_train_selected_features, y_train).predict(X_test_selected_features)

    			f1[r] += fscore(y_test, y_test_pred)
    	
	for r in range(1,rLIMIT):
		f1[r] = f1[r]/10
		print(f1[r])

    			# with open('f1score.txt', 'a+') as file:
		    	# 	file.write(str(f1)+'\n')
	# clf = svr() # or 
	# clf = GaussianNB()

	# splitMetrics(clf, X, y) # or 
	# crossValidate(clf, X, y)

	# print(len(y))

	# c = 0.1
	# eps = 0.01
	# # for c,eps in (range(0.1,.5,4)*range(0.01,0.01,3)):
	# clf = SVR(C=c, epsilon=eps)
	# # clf.fit(X[:20], y[:20])

if __name__ == "__main__":
	main()
